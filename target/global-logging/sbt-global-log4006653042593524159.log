[0m[[0m[0mdebug[0m] [0m[0m> Exec(collectAnalyses, None, Some(CommandSource(network-1)))[0m
[0m[[0m[0mdebug[0m] [0m[0munmatched Processing event for requestId None: None[0m
[0m[[0m[0mdebug[0m] [0m[0mUnhandled notification received: initialized: JsonRpcNotificationMessage(2.0, initialized, {})[0m
[0m[[0m[0mdebug[0m] [0m[0mUnhandled notification received: textDocument/didOpen: JsonRpcNotificationMessage(2.0, textDocument/didOpen, {"textDocument":{"uri":"file:///c%3A/Users/msi/Desktop/Hangman/src/main/scala/ch/makery/hangman/view/HangmanGameOverController.scala","languageId":"scala","version":1,"text":"package ch.makery.hangman.view\r\n\r\nimport ch.makery.hangman.MainApp\r\nimport scalafxml.core.macros.sfxml\r\nimport scalafx.Includes._\r\nimport scalafx.event.ActionEvent\r\nimport scalafx.scene.control.Alert.AlertType\r\nimport scala.util.{Failure, Success}\r\nimport scalafx.scene.image.{Image, ImageView}\r\nimport scalafx.scene.control.{Button}\r\nimport scalafx.scene.text.Text\r\nimport scalafx.stage.Stage\r\n\r\n@sfxml\r\nclass HangmanGameOverController(\r\n    gameoverBG: ImageView,\r\n    homeButton: Button\r\n) {\r\n\r\n    var dialogStage: Stage = null\r\n    gameoverBG.image = new Image(\"file:resources/images/dead.jpg\")\r\n\r\n    def goHome(action : ActionEvent): Unit = {\r\n        MainApp.showHomeScreen()\r\n        dialogStage.close()\r\n    }\r\n}"}})[0m
[0m[[0m[0mdebug[0m] [0m[0mUnhandled notification received: textDocument/didOpen: JsonRpcNotificationMessage(2.0, textDocument/didOpen, {"textDocument":{"uri":"file:///c%3A/Users/msi/Desktop/Hangman/src/main/scala/ch/makery/hangman/view/HangmanWinController.scala","languageId":"scala","version":1,"text":"package ch.makery.hangman.view\r\n\r\nimport ch.makery.hangman.MainApp\r\nimport scalafxml.core.macros.sfxml\r\nimport scalafx.Includes._\r\nimport scalafx.event.ActionEvent\r\nimport scalafx.scene.control.Alert.AlertType\r\nimport scala.util.{Failure, Success}\r\nimport scalafx.scene.image.{Image, ImageView}\r\nimport scalafx.scene.control.{Button}\r\nimport scalafx.scene.text.Text\r\nimport scalafx.stage.Stage\r\n\r\n@sfxml\r\nclass HangmanWinController(\r\n    wingameBG: ImageView,\r\n    nextButton: Button,\r\n) {\r\n\r\n    var dialogStage: Stage = null\r\n\r\n    wingameBG.image = new Image(\"file:resources/images/Win.jpg\")\r\n\r\n    def goNext(action : ActionEvent): Unit = { \r\n        MainApp.showGame()\r\n        dialogStage.close()\r\n    }\r\n}"}})[0m
[0m[[0m[0mdebug[0m] [0m[0mEvaluating tasks: Compile / collectAnalyses[0m
[0m[[0m[0mdebug[0m] [0m[0mRunning task... Cancel: Signal, check cycles: false, forcegc: true[0m
[0m[[0m[0mdebug[0m] [0m[0manalysis location (C:\Users\msi\Desktop\Hangman\target\scala-2.12\zinc\inc_compile_2.12.zip,true)[0m
[0m[[0m[32msuccess[0m] [0m[0mTotal time: 0 s, completed Jul 14, 2022 11:31:52 PM[0m
[0m[[0m[0mdebug[0m] [0m[0munmatched Done event for requestId None: None[0m
[0m[[0m[0mdebug[0m] [0m[0m> Exec(shell, None, None)[0m
[0m[[0m[0mdebug[0m] [0m[0mUnhandled notification received: textDocument/didOpen: JsonRpcNotificationMessage(2.0, textDocument/didOpen, {"textDocument":{"uri":"file:///c%3A/Users/msi/Desktop/Hangman/src/main/scala/ch/makery/hangman/view/HangmanGameController.scala","languageId":"scala","version":1,"text":"package ch.makery.hangman.view\r\n\r\nimport ch.makery.hangman.MainApp\r\nimport ch.makery.hangman.model.Word\r\nimport scalafxml.core.macros.sfxml\r\nimport scalafx.Includes._\r\nimport scalafx.event.ActionEvent\r\nimport scalafx.scene.control.Alert.AlertType\r\nimport scala.util.{Failure, Success}\r\nimport scalafx.scene.image.{Image, ImageView}\r\nimport scalafx.scene.control.{Button}\r\nimport scalafx.scene.text.Text\r\n\r\n@sfxml\r\nclass HangmanGameController(\r\n    hangmanImage: ImageView,\r\n    qKey: Button,\r\n    wKey: Button,\r\n    eKey: Button,\r\n    rKey: Button,\r\n    tKey: Button,\r\n    yKey: Button,\r\n    uKey: Button,\r\n    iKey: Button,\r\n    oKey: Button,\r\n    pKey: Button,\r\n    aKey: Button,\r\n    sKey: Button,\r\n    dKey: Button,\r\n    fKey: Button,\r\n    gKey: Button,\r\n    hKey: Button,\r\n    jKey: Button,\r\n    kKey: Button,\r\n    lKey: Button,\r\n    zKey: Button,\r\n    xKey: Button,\r\n    cKey: Button,\r\n    vKey: Button,\r\n    bKey: Button,\r\n    nKey: Button,\r\n    mKey: Button,\r\n    hangmanText: Text\r\n    ) {\r\n\r\n    // generate random word \r\n    var hangmanWord = new Word(\"src/main/randomWords.txt\")\r\n    var wordList: List[String] = null\r\n    var word: String = null\r\n    var charList: List[Char] = null\r\n    var wordSize: Int = 0\r\n    var placeholder: List[Char] = null\r\n    var text: String = null\r\n    var counter: Int = 0\r\n    var remain: Int = 0\r\n\r\n    def generateWord(): Unit = {\r\n        wordList = hangmanWord.wordList()\r\n        word = hangmanWord.selectWord(wordList)\r\n        charList = hangmanWord.wordSplit(word)\r\n        wordSize = word.length()\r\n        placeholder = hangmanWord.generatePlaceholder(wordSize)\r\n    }\r\n\r\n   def checkAns(input: Char): Boolean = {\r\n    if (hangmanWord.checkWord(input)) {\r\n        for (i <- 0 to wordSize-1) {\r\n            if (charList(i) == input) {\r\n                remain -= 1\r\n                placeholder = placeholder.updated(i, input)\r\n            }\r\n        }\r\n        text = placeholder.mkString(\" \")\r\n        hangmanText.setText(text)\r\n        if (remain == 0) { \r\n            MainApp.showWonGame()\r\n        }\r\n        return true\r\n    }\r\n    else {\r\n        if (counter == 0) {\r\n            hangmanImage.setVisible(true)\r\n        }\r\n        else {\r\n            hangmanImage.image = new Image(imageList(counter))\r\n            hangmanImage.setVisible(true)\r\n        }\r\n        counter += 1\r\n        if (counter == 5) {\r\n            MainApp.showGameOver()\r\n        }\r\n        return false\r\n    }\r\n   }\r\n\r\n   generateWord()\r\n\r\n   text = placeholder.mkString(\" \")\r\n   hangmanText.setText(text)\r\n\r\n   counter = 0\r\n   remain = wordSize\r\n   private val imageList = List(\"file:resources/images/wrong1.png\", \"file:resources/images/wrong2.png\", \"file:resources/images/wrong3.png\", \"file:resources/images/wrong4.png\", \"file:resources/images/wrong5.png\")\r\n\r\n   hangmanImage.image = new Image(imageList(counter))\r\n   hangmanImage.setVisible(false)\r\n\r\n   qKey.onAction = (e: ActionEvent) => {\r\n    if (checkAns('Q')) {\r\n        qKey.setVisible(false)\r\n    }\r\n   }\r\n\r\n   wKey.onAction = (e: ActionEvent) => {\r\n    if (checkAns('W')) {\r\n        wKey.setVisible(false)\r\n    }\r\n   }\r\n\r\n   eKey.onAction = (e: ActionEvent) => {\r\n    if (checkAns('E')) {\r\n        eKey.setVisible(false)\r\n    }\r\n   }\r\n\r\n   rKey.onAction = (e: ActionEvent) => {\r\n    if (checkAns('R')) {\r\n        rKey.setVisible(false)\r\n    }\r\n   }\r\n\r\n   tKey.onAction = (e: ActionEvent) => {\r\n    if (checkAns('T')) {\r\n        tKey.setVisible(false)\r\n    }\r\n   }\r\n\r\n   yKey.onAction = (e: ActionEvent) => {\r\n    if (checkAns('Y')) {\r\n        yKey.setVisible(false)\r\n    }\r\n   }\r\n\r\n   uKey.onAction = (e: ActionEvent) => {\r\n    if (checkAns('U')) {\r\n        uKey.setVisible(false)\r\n    }\r\n   }\r\n\r\n   iKey.onAction = (e: ActionEvent) => {\r\n    if (checkAns('I')) {\r\n        iKey.setVisible(false)\r\n    }\r\n   }\r\n\r\n   oKey.onAction = (e: ActionEvent) => {\r\n    if (checkAns('O')) {\r\n        oKey.setVisible(false)\r\n    }\r\n   }\r\n\r\n   pKey.onAction = (e: ActionEvent) => {\r\n    if (checkAns('P')) {\r\n        pKey.setVisible(false)\r\n    }\r\n   }\r\n\r\n   aKey.onAction = (e: ActionEvent) => {\r\n    if (checkAns('A')) {\r\n        aKey.setVisible(false)\r\n    }\r\n   }\r\n\r\n   sKey.onAction = (e: ActionEvent) => {\r\n    if (checkAns('S')) {\r\n        sKey.setVisible(false)\r\n    }\r\n   }\r\n\r\n   dKey.onAction = (e: ActionEvent) => {\r\n    if (checkAns('D')) {\r\n        dKey.setVisible(false)\r\n    }\r\n   }\r\n\r\n   fKey.onAction = (e: ActionEvent) => {\r\n    if (checkAns('F')) {\r\n        fKey.setVisible(false)\r\n    }\r\n   }\r\n\r\n   gKey.onAction = (e: ActionEvent) => {\r\n    if (checkAns('G')) {\r\n        gKey.setVisible(false)\r\n    }\r\n   }\r\n\r\n   hKey.onAction = (e: ActionEvent) => {\r\n    if (checkAns('H')) {\r\n        hKey.setVisible(false)\r\n    }\r\n   }\r\n\r\n   jKey.onAction = (e: ActionEvent) => {\r\n    if (checkAns('J')) {\r\n        jKey.setVisible(false)\r\n    }\r\n   }\r\n\r\n   kKey.onAction = (e: ActionEvent) => {\r\n    if (checkAns('K')) {\r\n        kKey.setVisible(false)\r\n    }\r\n   }\r\n\r\n   lKey.onAction = (e: ActionEvent) => {\r\n    if (checkAns('L')) {\r\n        lKey.setVisible(false)\r\n    }\r\n   }\r\n\r\n   zKey.onAction = (e: ActionEvent) => {\r\n    if (checkAns('Z')) {\r\n        zKey.setVisible(false)\r\n    }\r\n   }\r\n\r\n   xKey.onAction = (e: ActionEvent) => {\r\n    if (checkAns('X')) {\r\n        xKey.setVisible(false)\r\n    }\r\n   }\r\n\r\n   cKey.onAction = (e: ActionEvent) => {\r\n    if (checkAns('C')) {\r\n        cKey.setVisible(false)\r\n    }\r\n   }\r\n\r\n   vKey.onAction = (e: ActionEvent) => {\r\n    if (checkAns('V')) {\r\n        vKey.setVisible(false)\r\n    }\r\n   }\r\n\r\n   bKey.onAction = (e: ActionEvent) => {\r\n    if (checkAns('B')) {\r\n        bKey.setVisible(false)\r\n    }\r\n   }\r\n\r\n   nKey.onAction = (e: ActionEvent) => {\r\n    if (checkAns('N')) {\r\n        nKey.setVisible(false)\r\n    }\r\n   }\r\n\r\n   mKey.onAction = (e: ActionEvent) => {\r\n    if (checkAns('M')) {\r\n        mKey.setVisible(false)\r\n    }\r\n   }\r\n\r\n   def goHome(action: ActionEvent): Unit = {\r\n    MainApp.showHomeScreen()\r\n   }\r\n\r\n   def exitGame(action: ActionEvent): Unit = {\r\n    System.exit(0)\r\n   }\r\n}"}})[0m
