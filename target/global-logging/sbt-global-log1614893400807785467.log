[0m[[0m[0mdebug[0m] [0m[0m> Exec(collectAnalyses, None, Some(CommandSource(network-1)))[0m
[0m[[0m[0mdebug[0m] [0m[0munmatched Processing event for requestId None: None[0m
[0m[[0m[0mdebug[0m] [0m[0mEvaluating tasks: Compile / collectAnalyses[0m
[0m[[0m[0mdebug[0m] [0m[0mRunning task... Cancel: Signal, check cycles: false, forcegc: true[0m
[0m[[0m[0mdebug[0m] [0m[0mUnhandled notification received: initialized: JsonRpcNotificationMessage(2.0, initialized, {})[0m
[0m[[0m[0mdebug[0m] [0m[0mUnhandled notification received: textDocument/didOpen: JsonRpcNotificationMessage(2.0, textDocument/didOpen, {"textDocument":{"uri":"file:///c%3A/Users/msi/Desktop/Hangman/build.sbt","languageId":"scala","version":1,"text":"name := \"hangman\"\r\n \r\nversion := \"1.0\"\r\n \r\nscalaVersion := \"2.12.11\"\r\n \r\nfork := true\r\n\r\n\r\n// https://mvnrepository.com/artifact/org.scalafx/scalafx\r\nlibraryDependencies += \"org.scalafx\" %% \"scalafx\" % \"18.0.1-R27\"\r\n\r\n// https://mvnrepository.com/artifact/org.scalafx/scalafxml-core-sfx8\r\nlibraryDependencies += \"org.scalafx\" %% \"scalafxml-core-sfx8\" % \"0.5\"\r\n\r\n\r\naddCompilerPlugin(\"org.scalamacros\" % \"paradise\" % \"2.1.1\" cross CrossVersion.full) \r\n\r\n\r\n"}})[0m
[0m[[0m[0mdebug[0m] [0m[0manalysis location (C:\Users\msi\Desktop\Hangman\target\scala-2.12\zinc\inc_compile_2.12.zip,true)[0m
[0m[[0m[32msuccess[0m] [0m[0mTotal time: 0 s, completed Jul 14, 2022 9:48:53 AM[0m
[0m[[0m[0mdebug[0m] [0m[0munmatched Done event for requestId None: None[0m
[0m[[0m[0mdebug[0m] [0m[0m> Exec(shell, None, None)[0m
[0m[[0m[0mdebug[0m] [0m[0mUnhandled notification received: textDocument/didOpen: JsonRpcNotificationMessage(2.0, textDocument/didOpen, {"textDocument":{"uri":"file:///c%3A/Users/msi/Desktop/Hangman/src/main/scala/ch/makery/hangman/view/HangmanGameController.scala","languageId":"scala","version":1,"text":"package ch.makery.hangman.view\r\n\r\nimport ch.makery.hangman.MainApp\r\nimport ch.makery.hangman.model.Word\r\nimport scalafxml.core.macros.sfxml\r\nimport scalafx.Includes._\r\nimport scalafx.event.ActionEvent\r\nimport scalafx.scene.control.Alert.AlertType\r\nimport scala.util.{Failure, Success}\r\nimport scalafx.scene.image.{Image, ImageView}\r\nimport scalafx.scene.control.{Button}\r\nimport scalafx.scene.text.Text\r\n\r\n@sfxml\r\nclass HangmanGameController(\r\n    hangmanImage: ImageView,\r\n    qKey: Button,\r\n    wKey: Button,\r\n    eKey: Button,\r\n    rKey: Button,\r\n    tKey: Button,\r\n    yKey: Button,\r\n    uKey: Button,\r\n    iKey: Button,\r\n    oKey: Button,\r\n    pKey: Button,\r\n    aKey: Button,\r\n    sKey: Button,\r\n    dKey: Button,\r\n    fKey: Button,\r\n    gKey: Button,\r\n    hKey: Button,\r\n    jKey: Button,\r\n    kKey: Button,\r\n    lKey: Button,\r\n    zKey: Button,\r\n    xKey: Button,\r\n    cKey: Button,\r\n    vKey: Button,\r\n    bKey: Button,\r\n    nKey: Button,\r\n    mKey: Button,\r\n    hangmanText: Text\r\n    ) {\r\n\r\n    // generate random word \r\n    var word = \"HELLO\"\r\n    var wordSize = word.length()\r\n    var hangmanWord = new Word(word)\r\n\r\n    var charList = hangmanWord.wordSplit(word)\r\n    var placeholder = hangmanWord.generatePlaceholder(wordSize)\r\n\r\n    var text = placeholder.mkString(\" \")\r\n    hangmanText.setText(text)\r\n\r\n    // Hangman counter; 5 chances to guess the word \r\n    var counter = 0\r\n    var remain = wordSize\r\n    private val imageList = List(\"file:resources/images/wrong1.png\", \"file:resources/images/wrong2.png\", \"file:resources/images/wrong3.png\", \"file:resources/images/wrong4.png\", \"file:resources/images/wrong5.png\")\r\n\r\n    hangmanImage.image = new Image(imageList(counter))\r\n    hangmanImage.setVisible(false)\r\n\r\n   def checkAns(input: Char): Unit = {\r\n    if (hangmanWord.checkWord(input)) {\r\n        remain -= 1\r\n        for (i <- 0 to wordSize-1) {\r\n            if (charList(i) == input) {\r\n                placeholder = placeholder.updated(i, input)\r\n            }\r\n        }\r\n        text = placeholder.mkString(\" \")\r\n        hangmanText.setText(text)\r\n        if (remain == 1) {\r\n            MainApp.showWonGame()\r\n        }\r\n    }\r\n    else {\r\n        if (counter == 0) {\r\n            hangmanImage.setVisible(true)\r\n        }\r\n        else {\r\n            hangmanImage.image = new Image(imageList(counter))\r\n            hangmanImage.setVisible(true)\r\n        }\r\n        counter += 1\r\n        if (counter == 5) {\r\n            MainApp.showGameOver()\r\n        }\r\n    }\r\n   }\r\n\r\n   qKey.onAction = (e: ActionEvent) => {\r\n    checkAns('Q')\r\n   }\r\n\r\n   wKey.onAction = (e: ActionEvent) => {\r\n    checkAns('W')\r\n   }\r\n\r\n   eKey.onAction = (e: ActionEvent) => {\r\n    checkAns('E')\r\n   }\r\n\r\n   rKey.onAction = (e: ActionEvent) => {\r\n    checkAns('R')\r\n   }\r\n\r\n   tKey.onAction = (e: ActionEvent) => {\r\n    checkAns('T')\r\n   }\r\n\r\n   yKey.onAction = (e: ActionEvent) => {\r\n    checkAns('Y')\r\n   }\r\n\r\n   uKey.onAction = (e: ActionEvent) => {\r\n    checkAns('U')\r\n   }\r\n\r\n   iKey.onAction = (e: ActionEvent) => {\r\n    checkAns('I')\r\n   }\r\n\r\n   oKey.onAction = (e: ActionEvent) => {\r\n    checkAns('O')\r\n   }\r\n\r\n   pKey.onAction = (e: ActionEvent) => {\r\n    checkAns('P')\r\n   }\r\n\r\n   aKey.onAction = (e: ActionEvent) => {\r\n    checkAns('A')\r\n   }\r\n\r\n   sKey.onAction = (e: ActionEvent) => {\r\n    checkAns('S')\r\n   }\r\n\r\n   dKey.onAction = (e: ActionEvent) => {\r\n    checkAns('D')\r\n   }\r\n\r\n   fKey.onAction = (e: ActionEvent) => {\r\n    checkAns('F')\r\n   }\r\n\r\n   gKey.onAction = (e: ActionEvent) => {\r\n    checkAns('G')\r\n   }\r\n\r\n   hKey.onAction = (e: ActionEvent) => {\r\n    checkAns('H')\r\n   }\r\n\r\n   jKey.onAction = (e: ActionEvent) => {\r\n    checkAns('J')\r\n   }\r\n\r\n   kKey.onAction = (e: ActionEvent) => {\r\n    checkAns('K')\r\n   }\r\n\r\n   lKey.onAction = (e: ActionEvent) => {\r\n    checkAns('L')\r\n   }\r\n\r\n   zKey.onAction = (e: ActionEvent) => {\r\n    checkAns('Z')\r\n   }\r\n\r\n   xKey.onAction = (e: ActionEvent) => {\r\n    checkAns('X')\r\n   }\r\n\r\n   cKey.onAction = (e: ActionEvent) => {\r\n    checkAns('C')\r\n   }\r\n\r\n   vKey.onAction = (e: ActionEvent) => {\r\n    checkAns('V')\r\n   }\r\n\r\n   bKey.onAction = (e: ActionEvent) => {\r\n    checkAns('B')\r\n   }\r\n\r\n   nKey.onAction = (e: ActionEvent) => {\r\n    checkAns('N')\r\n   }\r\n\r\n   mKey.onAction = (e: ActionEvent) => {\r\n    checkAns('M')\r\n   }\r\n}"}})[0m
[0m[[0m[0mdebug[0m] [0m[0mUnhandled notification received: textDocument/didOpen: JsonRpcNotificationMessage(2.0, textDocument/didOpen, {"textDocument":{"uri":"file:///c%3A/Users/msi/Desktop/Hangman/src/main/scala/ch/makery/hangman/MainApp.scala","languageId":"scala","version":1,"text":"package ch.makery.hangman\r\n\r\nimport scalafx.Includes._\r\nimport scalafx.application.JFXApp\r\nimport scalafx.application.JFXApp.PrimaryStage\r\nimport javafx.{scene => jfxs}\r\nimport scalafxml.core.{NoDependencyResolver, FXMLView, FXMLLoader}\r\nimport scalafx.scene.Scene\r\nimport scalafx.stage.{ Stage, Modality }\r\nimport ch.makery.hangman.view.HangmanEndController\r\nimport ch.makery.hangman.view.HangmanGameOverController\r\nimport scalafx.scene.image._\r\n\r\nobject MainApp extends JFXApp{\r\n\r\n    val rootResource = getClass.getResource(\"view/RootLayout.fxml\")\r\n    val loader = new FXMLLoader(rootResource, NoDependencyResolver)\r\n    loader.load();\r\n\r\n    val roots = loader.getRoot[jfxs.layout.BorderPane]\r\n\r\n    stage = new PrimaryStage{\r\n        title = \"Hangman\"\r\n        icons += new Image(\"file:resources/images/hangman.png\")\r\n        scene = new Scene{\r\n            root = roots\r\n        }\r\n    }\r\n\r\n    // Disable stage resize \r\n    MainApp.stage.setResizable(false)\r\n\r\n    def showHomeScreen(): Unit = {\r\n        val resource = getClass.getResource(\"view/HomeScreen.fxml\")\r\n        val loader = new FXMLLoader(resource, NoDependencyResolver)\r\n        loader.load()\r\n        val roots = loader.getRoot[jfxs.layout.AnchorPane]\r\n        this.roots.setCenter(roots)\r\n    }\r\n\r\n    def showGame(): Unit = {\r\n        val resource = getClass.getResource(\"view/HangmanGame.fxml\")\r\n        val loader = new FXMLLoader(resource, NoDependencyResolver)\r\n        loader.load()\r\n        val roots = loader.getRoot[jfxs.layout.AnchorPane]\r\n        this.roots.setCenter(roots)\r\n    }\r\n\r\n    def showWonGame(): Unit = {\r\n        \r\n        val resource = getClass.getResource(\"view/HangmanEnd.fxml\")\r\n        val loader = new FXMLLoader(resource, NoDependencyResolver)\r\n        loader.load()\r\n        val control = loader.getController[HangmanEndController#Controller]\r\n        val roots2 = loader.getRoot[jfxs.layout.AnchorPane]\r\n\r\n        var dialog = new Stage() {\r\n            title = \"Hangman\"\r\n            icons += new Image(\"file:resources/images/hangman.png\")\r\n            initModality(Modality.APPLICATION_MODAL)\r\n            initOwner(stage)\r\n            scene = new Scene {\r\n                root = roots2\r\n            }\r\n        }\r\n        control.dialogStage = dialog\r\n        dialog.setResizable(false)\r\n        dialog.showAndWait()\r\n    }\r\n\r\n    def showGameOver(): Unit = {\r\n        \r\n        val resource = getClass.getResource(\"view/HangmanGameOver.fxml\")\r\n        val loader = new FXMLLoader(resource, NoDependencyResolver)\r\n        loader.load()\r\n        val control = loader.getController[HangmanGameOverController#Controller]\r\n        val roots3 = loader.getRoot[jfxs.layout.AnchorPane]\r\n\r\n        var dialog2 = new Stage() {\r\n            title = \"Hangman\"\r\n            icons += new Image(\"file:resources/images/hangman.png\")\r\n            initModality(Modality.APPLICATION_MODAL)\r\n            initOwner(stage)\r\n            scene = new Scene {\r\n                root = roots3\r\n            }\r\n        }\r\n        control.dialogStage = dialog2\r\n        dialog2.setResizable(false)\r\n        dialog2.showAndWait()\r\n    }\r\n    showHomeScreen()\r\n}"}})[0m
[0m[[0m[0mdebug[0m] [0m[0mUnhandled notification received: textDocument/didOpen: JsonRpcNotificationMessage(2.0, textDocument/didOpen, {"textDocument":{"uri":"file:///c%3A/Users/msi/Desktop/Hangman/src/main/scala/ch/makery/hangman/view/HangmanGameOverController.scala","languageId":"scala","version":1,"text":"package ch.makery.hangman.view\r\n\r\nimport ch.makery.hangman.MainApp\r\nimport scalafxml.core.macros.sfxml\r\nimport scalafx.Includes._\r\nimport scalafx.event.ActionEvent\r\nimport scalafx.scene.control.Alert.AlertType\r\nimport scala.util.{Failure, Success}\r\nimport scalafx.scene.image.{Image, ImageView}\r\nimport scalafx.scene.control.{Button}\r\nimport scalafx.scene.text.Text\r\nimport scalafx.stage.Stage\r\n\r\n@sfxml\r\nclass HangmanGameOverController(\r\n    gameoverBG: ImageView,\r\n    homeButton: Button\r\n) {\r\n\r\n    var dialogStage: Stage = null\r\n    gameoverBG.image = new Image(\"file:resources/images/dead.jpg\")\r\n\r\n    def goHome(action : ActionEvent): Unit = {\r\n        MainApp.showHomeScreen()\r\n        dialogStage.close()\r\n    }\r\n}"}})[0m
[0m[[0m[0mdebug[0m] [0m[0mForcing garbage collection...[0m
