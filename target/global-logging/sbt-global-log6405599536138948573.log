[0m[[0m[0mdebug[0m] [0m[0m> Exec(collectAnalyses, None, Some(CommandSource(network-1)))[0m
[0m[[0m[0mdebug[0m] [0m[0munmatched Processing event for requestId None: None[0m
[0m[[0m[0mdebug[0m] [0m[0mUnhandled notification received: initialized: JsonRpcNotificationMessage(2.0, initialized, {})[0m
[0m[[0m[0mdebug[0m] [0m[0mUnhandled notification received: textDocument/didOpen: JsonRpcNotificationMessage(2.0, textDocument/didOpen, {"textDocument":{"uri":"file:///c%3A/Users/msi/Documents/GitHub/Hangman-Scala/src/main/scala/ch/makery/hangman/MainApp.scala","languageId":"scala","version":1,"text":"package ch.makery.hangman\r\n\r\n// Import libraries \r\nimport scalafx.Includes._\r\nimport scalafx.application.JFXApp\r\nimport scalafx.application.JFXApp.PrimaryStage\r\nimport javafx.{scene => jfxs}\r\nimport scalafxml.core.{NoDependencyResolver, FXMLView, FXMLLoader}\r\nimport scalafx.scene.Scene\r\nimport scalafx.stage.{ Stage, Modality, StageStyle }\r\nimport ch.makery.hangman.view.HangmanWinController\r\nimport ch.makery.hangman.view.HangmanGameOverController\r\nimport ch.makery.hangman.view.HangmanGameController\r\nimport scalafx.scene.image._\r\n\r\n// Main app object \r\nobject MainApp extends JFXApp{\r\n\r\n    // score: an Int variable to store game score\r\n    var score = 0\r\n\r\n    // Load the resources from the main fxml file \r\n    val rootResource = getClass.getResource(\"view/RootLayout.fxml\")\r\n    val loader = new FXMLLoader(rootResource, NoDependencyResolver)\r\n    loader.load();\r\n    val roots = loader.getRoot[jfxs.layout.BorderPane]\r\n\r\n    // Create primary stage as the main window of the program\r\n    stage = new PrimaryStage{\r\n        title = \"Hangman\"\r\n        icons += new Image(\"file:resources/images/hangman.png\")\r\n        scene = new Scene{\r\n            root = roots\r\n        }\r\n    }\r\n\r\n    // Disable stage resize \r\n    MainApp.stage.setResizable(false)\r\n\r\n    def showHomeScreen(): Unit = {\r\n        val resource = getClass.getResource(\"view/HomeScreen.fxml\")\r\n        val loader = new FXMLLoader(resource, NoDependencyResolver)\r\n        loader.load()\r\n        val roots = loader.getRoot[jfxs.layout.AnchorPane]\r\n        this.roots.setCenter(roots)\r\n    }\r\n\r\n    def showRule(): Unit = {\r\n        val resource = getClass.getResource(\"view/HangmanRule.fxml\")\r\n        val loader = new FXMLLoader(resource, NoDependencyResolver)\r\n        loader.load()\r\n        val roots = loader.getRoot[jfxs.layout.AnchorPane]\r\n        this.roots.setCenter(roots)\r\n    }\r\n\r\n    def showGame(): Unit = {\r\n        val resource = getClass.getResource(\"view/HangmanGame.fxml\")\r\n        val loader = new FXMLLoader(resource, NoDependencyResolver)\r\n        loader.load()\r\n        val roots = loader.getRoot[jfxs.layout.AnchorPane]\r\n        this.roots.setCenter(roots)\r\n    }\r\n\r\n    def showWonGame(): Unit = {\r\n        val resource = getClass.getResource(\"view/HangmanWin.fxml\")\r\n        val loader = new FXMLLoader(resource, NoDependencyResolver)\r\n        loader.load()\r\n        val control = loader.getController[HangmanWinController#Controller]\r\n        val roots2 = loader.getRoot[jfxs.layout.AnchorPane]\r\n        var dialog = new Stage() {\r\n            title = \"Hangman\"\r\n            icons += new Image(\"file:resources/images/hangman.png\")\r\n            initModality(Modality.APPLICATION_MODAL)\r\n            initOwner(stage)\r\n            scene = new Scene {\r\n                root = roots2\r\n            }\r\n        }\r\n        score += 1 \r\n        control.scoreDisplay.setText(score.toString)\r\n        control.dialogStage = dialog\r\n        dialog.setResizable(false)\r\n        dialog.initStyle(StageStyle.UNDECORATED)\r\n        dialog.showAndWait()\r\n    }\r\n\r\n    def showGameOver(answer: String): Unit = {\r\n        \r\n        val resource = getClass.getResource(\"view/HangmanGameOver.fxml\")\r\n        val loader = new FXMLLoader(resource, NoDependencyResolver)\r\n        loader.load()\r\n        val control = loader.getController[HangmanGameOverController#Controller]\r\n        val roots3 = loader.getRoot[jfxs.layout.AnchorPane]\r\n\r\n        var dialog2 = new Stage() {\r\n            title = \"Hangman\"\r\n            icons += new Image(\"file:resources/images/hangman.png\")\r\n            initModality(Modality.APPLICATION_MODAL)\r\n            initOwner(stage)\r\n            scene = new Scene {\r\n                root = roots3\r\n            }\r\n        }\r\n        control.scoreDisplay.setText(score.toString)\r\n        control.answerDisplay.setText(answer)\r\n        control.dialogStage = dialog2\r\n        dialog2.initStyle(StageStyle.UNDECORATED)\r\n        dialog2.setResizable(false)\r\n        dialog2.showAndWait()\r\n    }\r\n    showHomeScreen()\r\n}"}})[0m
[0m[[0m[0mdebug[0m] [0m[0mEvaluating tasks: Compile / collectAnalyses[0m
[0m[[0m[0mdebug[0m] [0m[0mRunning task... Cancel: Signal, check cycles: false, forcegc: true[0m
[0m[[0m[0mdebug[0m] [0m[0manalysis location (C:\Users\msi\Documents\GitHub\Hangman-Scala\target\scala-2.12\zinc\inc_compile_2.12.zip,true)[0m
[0m[[0m[32msuccess[0m] [0m[0mTotal time: 0 s, completed Jul 15, 2022 2:58:29 PM[0m
[0m[[0m[0mdebug[0m] [0m[0munmatched Done event for requestId None: None[0m
[0m[[0m[0mdebug[0m] [0m[0m> Exec(shell, None, None)[0m
[0m[[0m[0mdebug[0m] [0m[0mForcing garbage collection...[0m
[0m[[0m[0mdebug[0m] [0m[0mUnhandled notification received: textDocument/didOpen: JsonRpcNotificationMessage(2.0, textDocument/didOpen, {"textDocument":{"uri":"file:///c%3A/Users/msi/Documents/GitHub/Hangman-Scala/src/main/scala/ch/makery/hangman/view/HomeScreenController.scala","languageId":"scala","version":1,"text":"package ch.makery.hangman.view\r\n\r\nimport ch.makery.hangman.MainApp\r\nimport scalafxml.core.macros.sfxml\r\nimport scalafx.Includes._\r\nimport scalafx.event.ActionEvent\r\nimport scalafx.scene.control.Alert.AlertType\r\nimport scala.util.{Failure, Success}\r\nimport scalafx.scene.image.{Image, ImageView}\r\nimport scalafx.scene.media.{Media, MediaPlayer}\r\n\r\n@sfxml\r\nclass HomeScreenController() {\r\n    \r\n    def startGame(action : ActionEvent): Unit = {\r\n        MainApp.showGame()\r\n    }\r\n\r\n    def endGame(action: ActionEvent): Unit = {\r\n        System.exit(0)\r\n    }\r\n\r\n    def showRule(action: ActionEvent): Unit = {\r\n        MainApp.showRule()\r\n    }\r\n}"}})[0m
[0m[[0m[0mdebug[0m] [0m[0mUnhandled notification received: textDocument/didClose: JsonRpcNotificationMessage(2.0, textDocument/didClose, {"textDocument":{"uri":"file:///c%3A/Users/msi/Documents/GitHub/Hangman-Scala/src/main/scala/ch/makery/hangman/view/HomeScreenController.scala"}})[0m
[0m[[0m[0mdebug[0m] [0m[0mUnhandled notification received: textDocument/didOpen: JsonRpcNotificationMessage(2.0, textDocument/didOpen, {"textDocument":{"uri":"file:///c%3A/Users/msi/Documents/GitHub/Hangman-Scala/src/main/scala/ch/makery/hangman/view/HangmanWinController.scala","languageId":"scala","version":1,"text":"package ch.makery.hangman.view\r\n\r\nimport ch.makery.hangman.MainApp\r\nimport scalafxml.core.macros.sfxml\r\nimport scalafx.Includes._\r\nimport scalafx.event.ActionEvent\r\nimport scalafx.scene.control.Alert.AlertType\r\nimport scala.util.{Failure, Success}\r\nimport scalafx.scene.image.{Image, ImageView}\r\nimport scalafx.scene.control.{Button}\r\nimport scalafx.scene.text.Text\r\nimport scalafx.stage.Stage\r\n\r\n@sfxml\r\nclass HangmanWinController(\r\n    wingameBG: ImageView,\r\n    nextButton: Button,\r\n    scoreText: Text\r\n) {\r\n\r\n    var scoreDisplay = scoreText\r\n    var dialogStage: Stage = null\r\n\r\n    wingameBG.image = new Image(\"file:resources/images/Win.jpg\")\r\n\r\n    def goNext(action : ActionEvent): Unit = { \r\n        MainApp.showGame()\r\n        dialogStage.close()\r\n    }\r\n}"}})[0m
[0m[[0m[0mdebug[0m] [0m[0mUnhandled notification received: textDocument/didClose: JsonRpcNotificationMessage(2.0, textDocument/didClose, {"textDocument":{"uri":"file:///c%3A/Users/msi/Documents/GitHub/Hangman-Scala/src/main/scala/ch/makery/hangman/view/HangmanWinController.scala"}})[0m
[0m[[0m[0mdebug[0m] [0m[0mUnhandled notification received: textDocument/didOpen: JsonRpcNotificationMessage(2.0, textDocument/didOpen, {"textDocument":{"uri":"file:///c%3A/Users/msi/Documents/GitHub/Hangman-Scala/src/main/scala/ch/makery/hangman/view/HomeScreenController.scala","languageId":"scala","version":1,"text":"package ch.makery.hangman.view\r\n\r\nimport ch.makery.hangman.MainApp\r\nimport scalafxml.core.macros.sfxml\r\nimport scalafx.Includes._\r\nimport scalafx.event.ActionEvent\r\nimport scalafx.scene.control.Alert.AlertType\r\nimport scala.util.{Failure, Success}\r\nimport scalafx.scene.image.{Image, ImageView}\r\nimport scalafx.scene.media.{Media, MediaPlayer}\r\n\r\n@sfxml\r\nclass HomeScreenController() {\r\n    \r\n    def startGame(action : ActionEvent): Unit = {\r\n        MainApp.showGame()\r\n    }\r\n\r\n    def endGame(action: ActionEvent): Unit = {\r\n        System.exit(0)\r\n    }\r\n\r\n    def showRule(action: ActionEvent): Unit = {\r\n        MainApp.showRule()\r\n    }\r\n}"}})[0m
